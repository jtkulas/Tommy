---
title: "Tommy's Dashboard"
format: 
  dashboard:
    orientation: rows
    logo: images/GraniteTable.png
    theme: themes.scss
    nav-buttons: 
      - github
server: shiny
---

```{r}
#| context: setup
#| message: false
#| echo: false
#| warning: false

# install.packages("fontawesome")  ## if this file does not render, try installing `fontawesome` by typing "install.packages("fontawesome")" into your console

library(psych) 
library(plotly)
library(fontawesome)

####### 
####### Actual data

data <- read.csv("Copy of UniversalScoreCardALL.xlsx - UniversalScoreCardX.csv")

```

# Static Overviews 

## Row {height=70%}

```{r}
#| title: "Example Static Map (Average Rental % by Tract)"
#| padding: 0px
#| message: false
#| warning: false

library(tidycensus)
library(plotly)
library(sf)
library(dplyr)

options(tigris_use_cache = TRUE)

mn_income <- get_acs(
  geography = "tract", 
  variables = "B19013_001",
  state = "MN", 
  year = 2020,
  geometry = TRUE
)

names(data)[names(data)=="GEOID20"] <- "GEOID"
try <- merge(data,mn_income, all.x=TRUE)
try2 <- st_as_sf(as_tibble(try))          ## sf object permits simpler plotting (see below)

#plot(mn_income["estimate"])
plot(try2["RENTALLPRCT"])
```

```{r}
#| title: "Example Static Map (Median Income by County)"
#| padding: 0px
#| message: false
#| warning: false
#| 
## Switch to county

state <- get_acs(geography = "county",
              variables = "B19013_001", 
              state = "MN",
              geometry=TRUE)

plot(state["estimate"])
```

```{r}
#| title: "Median Income by County (Sorted))"
#| padding: 0px
#| eval: true
#| 
state$NAME = stringr::str_remove(state$NAME, " County, Minnesota")

ggplot(sample_n(state,25), aes(x = estimate, y = reorder(NAME, estimate))) + 
  geom_point(size = 3, color = "#6f42c1") + 
  labs(title = "Median household income", 
       subtitle = "25 Random Counties in Minnesota", 
       x = "", 
       y = "Took from ACS") + 
  theme_minimal(base_size = 12.5) + 
  scale_x_continuous(labels = scales::label_dollar())
```


## Row {height="30%"} 

```{r}
#| content: valuebox
#| title: "Total Population Represented"

pop <- as.numeric(as.character(stringr::str_replace(data$Totpop,",","")))

list(
  icon = "people",
  color = "danger",
  value = format(sum(pop, na.rm=TRUE), big.mark=",")
)
```

```{r}
#| content: valuebox
#| title: "Number of Counties"
list(
  icon = "geo-alt",
  color = "success",
  value = nrow(table(data$COUNTYFP20))           ## Filtered based on selected county population
)
```

```{r}
#| content: valuebox
#| title: "Tracts"
list(
  icon = "clipboard-data",
#  color = "danger",
  value = nrow(data)
)
```

# Filtered Maps

## {.sidebar}

#### Sortable Fields

```{r}
selectInput('size', 'County', data$COUNTYFP20)
selectInput('color', 'Education', data$Education)
# selectInput('invoice', 'Payment Status', adopt2$`Invoice/ Payment Status`)
br()

br()
selectInput('x', 'X', names(data[c(29:30,1:25)])) 
selectInput('y', 'Y', names(data), names(data)[[30]])
```

```{r}
sliderInput('sampleSize', 'Sample Size', 
            min=1, max=nrow(data),
            value=10, 
            step=1, round=0)

```

```{r}
library(downloadthis)
## Link in Github repo
br()
br()
download_link(
  link = "https://pdfhost.io/v/.k3UPUvES_Report",
  button_label = "Download pdf report",
  button_type = "danger",
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)
```

##

## 
```{r}
#| context: server

dataset <- reactive({
  data[sample(nrow(data), input$sampleSize),]
})
 
output$plot <- renderPlot({
  
  p <-   ggplot(
    data(), 
    aes_string(x=input$x, y=input$y)) 
  
  if (input$size == 'None')
    p <- p + geom_point()
  
  if (input$size != 'None')
    p <- p + geom_point(aes_string(size = input$size))

  if (input$color != 'None')
    p <- p + aes_string(color=input$color)
  
  facets <- paste(input$facet_row, '~', input$facet_col)
  if (facets != '. ~ .')
    p <- p + facet_grid(facets)
  
  if (input$jitter)
    p <- p + geom_jitter(width = 0.8, height = .8)
  if (input$smooth)
    p <- p + geom_smooth()
  
p
  
})

```

## Column {width=70%}

```{r pie}
#| echo: false
#| warning: false
#| title: "Example HighSpeed by County"
#| padding: 0px


currentpie <- data %>%               ## contract status
  group_by(COUNTYFP20) %>%
  summarise(amount = sum(HighSpeed),
            owner = round(mean(OwnerOcc, na.rm=TRUE),2))


fips <- read.csv("MNfips.txt", header=FALSE)                     ## Qualitative names (County)
names(fips)[2] <- "COUNTYFP20"
currentpie2 <- merge(currentpie, fips, all.x=TRUE)

#currentpie$n <- c(21,26,1,22,20)
#currentpie$amount <- c(1000,2000,3000,4000,5000)
#currentpie[1,1] <- "Unknown"

fig <- plot_ly(currentpie2, labels = ~V1, values = ~amount, type = 'pie',
        textposition = 'inside',
        textinfo = 'label+percent',
        insidetextfont = list(color = '#FFFFFF'),
        hoverinfo = 'text',
        text = ~paste(V1, 'Average Owner\n Occupancy Rate=', owner),
        colors = "BrBG",
        showlegend = FALSE)
fig <- fig %>% layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

fig
```

## Column {width=30%}

![](https://facts.net/wp-content/uploads/2023/09/11-facts-about-pink-panther-the-pink-panther-1694403580.jpg)

# Comparisons 

## {.sidebar}



#### Placeholder filters - not currently linked

[Database](https://docs.google.com/spreadsheets/d/1kRGabeAQpL6qt_BHWuxTlJ6ZzfGPBFE9FlNrcGbU99A/edit#gid=357708833)

```{r}
selectInput('size', 'Client', c("Washington City 1", "Washington City 2"))
selectInput('color', 'Year', c("2024", "2023", "2022", "2021"))
# selectInput('invoice', 'Payment Status', adopt2$`Invoice/ Payment Status`)
br()
```


```{r}
library(downloadthis)
## Link in Github repo
br()
br()
download_link(
  link = "https://pdfhost.io/v/0w6bT4Qfj_Report_ind",
  button_label = "Download Client Report",
  button_type = "danger",
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)

br()
download_link(
  link = "https://pdfhost.io/v/BG0yy~.xE_invoice",
  button_label = "Download Invoice",
  button_type = "success",
  has_icon = TRUE,
  icon = "fa fa-money-bill",
  self_contained = FALSE
)
```

## {height=20%}

Client since Date, Year; Invoice pattern (historical)

```{r}
#Subtotals here

invoicing <- read.csv("TEMP-CGEE Adopt-a-Drain Contract Mgmnt System - WA City 1.csv")
```

```{r}
#| title: "Invoice Screenshot"
#| padding: 0px

library(kableExtra)
library(tidyverse)

kbl(invoicing[c(7:27),c(6:21)], col.names=NULL) %>%
  kable_paper("hover") %>%
  kable_minimal()

```


